{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","componentDidMount","pc","RTCPeerConnection","onicecandidate","e","candidate","console","log","JSON","stringify","oniceconnectionstatechange","ontrack","remoteVideoref","current","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","video","then","stream","window","localStream","localVideoref","addStream","catch","createOffer","offerToReceiveVideo","sdp","setLocalDescription","createAnswer","setRemoteDescription","desc","parse","textref","value","RTCSessionDescription","addCandidate","addIceCandidate","RTCIceCandidate","React","createRef","style","width","height","margin","backgroundColor","ref","this","autoPlay","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"4MA0KeA,E,YAvKb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,kBAAoB,WAgBlB,EAAKC,GAAK,IAAIC,kBAdI,MAiBlB,EAAKD,GAAGE,eAAiB,SAACC,GAGpBA,EAAEC,WACJC,QAAQC,IAAIC,KAAKC,UAAUL,EAAEC,aAIjC,EAAKJ,GAAGS,2BAA6B,SAACN,GACpCE,QAAQC,IAAIH,IAQd,EAAKH,GAAGU,QAAU,SAACP,GACjB,EAAKQ,eAAeC,QAAQC,UAAYV,EAAEW,QAAQ,IA+BpDC,UAAUC,aAAaC,aAbH,CAClBC,OAAO,EACPC,OAAO,IAYNC,MA3Ba,SAACC,GACfC,OAAOC,YAAcF,EACrB,EAAKG,cAAcZ,QAAQC,UAAYQ,EACvC,EAAKrB,GAAGyB,UAAUJ,MAyBjBK,OArBa,SAACvB,GACfE,QAAQC,IAAI,uBAAwBH,OA1DrB,EAmFnBwB,YAAc,WACZtB,QAAQC,IAAI,SAIZ,EAAKN,GAAG2B,YAAY,CAAEC,oBAAqB,IACxCR,MAAK,SAAAS,GACJxB,QAAQC,IAAIC,KAAKC,UAAUqB,IAG3B,EAAK7B,GAAG8B,oBAAoBD,OA7Ff,EAmGnBE,aAAe,WACb1B,QAAQC,IAAI,UACZ,EAAKN,GAAG+B,aAAa,CAAEH,oBAAqB,IACzCR,MAAK,SAAAS,GACJxB,QAAQC,IAAIC,KAAKC,UAAUqB,IAG3B,EAAK7B,GAAG8B,oBAAoBD,OA1Gf,EA8GnBG,qBAAuB,WAErB,IAAMC,EAAO1B,KAAK2B,MAAM,EAAKC,QAAQC,OAGrC,EAAKpC,GAAGgC,qBAAqB,IAAIK,sBAAsBJ,KAnHtC,EAsHnBK,aAAe,WAEb,IAAMlC,EAAYG,KAAK2B,MAAM,EAAKC,QAAQC,OAC1C/B,QAAQC,IAAI,oBAAqBF,GAGjC,EAAKJ,GAAGuC,gBAAgB,IAAIC,gBAAgBpC,KAxH5C,EAAKoB,cAAgBiB,IAAMC,YAC3B,EAAK/B,eAAiB8B,IAAMC,YALX,E,sEA+HT,IAAD,OAEP,OACE,6BACE,2BACEC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,gBAAiB,SAEnBC,IAAMC,KAAKzB,cACX0B,UAAQ,IAEV,2BACEP,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,gBAAiB,SAEnBC,IAAMC,KAAKtC,eACXuC,UAAQ,IAEV,6BAEA,4BAAQC,QAASF,KAAKtB,aAAtB,SACA,4BAAQwB,QAASF,KAAKlB,cAAtB,UAEA,6BACA,8BAAUiB,IAAK,SAAAA,GAAS,EAAKb,QAAUa,KAEvC,6BACA,4BAAQG,QAASF,KAAKjB,sBAAtB,mBACA,4BAAQmB,QAASF,KAAKX,cAAtB,sB,GAlKUc,aCUEC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB7C,WACrBA,UAAU8C,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,iB","file":"static/js/main.adffdb49.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // https://reactjs.org/docs/refs-and-the-dom.html\r\n    this.localVideoref = React.createRef()\r\n    this.remoteVideoref = React.createRef()\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n    const pc_config = null\r\n\r\n    // const pc_config1 = {\r\n    //   \"iceServers\": [\r\n    //     {\r\n    //       urls: 'stun:[STUN_IP]:[PORT]',\r\n    //       'credentials': '[YOR CREDENTIALS]',\r\n    //       'username': '[USERNAME]'\r\n    //     }\r\n    //   ]\r\n    // }\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\r\n    // create an instance of RTCPeerConnection\r\n    this.pc = new RTCPeerConnection(pc_config)\r\n\r\n    // triggered when a new candidate is returned\r\n    this.pc.onicecandidate = (e) => {\r\n      // send the candidates to the remote peer\r\n      // see addCandidate below to be triggered on the remote peer\r\n      if (e.candidate)\r\n        console.log(JSON.stringify(e.candidate))\r\n    }\r\n\r\n    // triggered when there is a change in connection state\r\n    this.pc.oniceconnectionstatechange = (e) => {\r\n      console.log(e)\r\n    }\r\n\r\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\r\n    // this.pc.onaddstream = (e) => {\r\n    //   this.remoteVideoref.current.srcObject = e.stream\r\n    // }\r\n\r\n    this.pc.ontrack = (e) => {\r\n      this.remoteVideoref.current.srcObject = e.streams[0]\r\n    }\r\n\r\n    // called when getUserMedia() successfully returns - see below\r\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\r\n    const success = (stream) => {\r\n      window.localStream = stream\r\n      this.localVideoref.current.srcObject = stream\r\n      this.pc.addStream(stream)\r\n    }\r\n\r\n    // called when getUserMedia() fails - see below\r\n    const failure = (e) => {\r\n      console.log('getUserMedia Error: ', e)\r\n    }\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n    // see the above link for more constraint options\r\n    const constraints = {\r\n      audio: true,\r\n      video: true,\r\n      // video: {\r\n      //   width: 1280,\r\n      //   height: 720\r\n      // },\r\n      // video: {\r\n      //   width: { min: 1280 },\r\n      // }\r\n    }\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(success)\r\n      .catch(failure)\r\n  }\r\n\r\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\r\n\r\n  createOffer = () => {\r\n    console.log('Offer')\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\r\n    // initiates the creation of SDP\r\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\r\n      .then(sdp => {\r\n        console.log(JSON.stringify(sdp))\r\n\r\n        // set offer sdp as local description\r\n        this.pc.setLocalDescription(sdp)\r\n    })\r\n  }\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\r\n  // creates an SDP answer to an offer received from remote peer\r\n  createAnswer = () => {\r\n    console.log('Answer')\r\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\r\n      .then(sdp => {\r\n        console.log(JSON.stringify(sdp))\r\n\r\n        // set answer sdp as local description\r\n        this.pc.setLocalDescription(sdp)\r\n    })\r\n  }\r\n\r\n  setRemoteDescription = () => {\r\n    // retrieve and parse the SDP copied from the remote peer\r\n    const desc = JSON.parse(this.textref.value)\r\n\r\n    // set sdp as remote description\r\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\r\n  }\r\n\r\n  addCandidate = () => {\r\n    // retrieve and parse the Candidate copied from the remote peer\r\n    const candidate = JSON.parse(this.textref.value)\r\n    console.log('Adding candidate:', candidate)\r\n\r\n    // add the candidate to the peer connection\r\n    this.pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <video\r\n          style={{\r\n            width: 240,\r\n            height: 240,\r\n            margin: 5,\r\n            backgroundColor: 'black'\r\n          }}\r\n          ref={ this.localVideoref }\r\n          autoPlay>\r\n        </video>\r\n        <video\r\n          style={{\r\n            width: 240,\r\n            height: 240,\r\n            margin: 5,\r\n            backgroundColor: 'black'\r\n          }}\r\n          ref={ this.remoteVideoref }\r\n          autoPlay>\r\n        </video>\r\n        <br />\r\n\r\n        <button onClick={this.createOffer}>Offer</button>\r\n        <button onClick={this.createAnswer}>Answer</button>\r\n\r\n        <br />\r\n        <textarea ref={ref => { this.textref = ref }} />\r\n\r\n        <br />\r\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\r\n        <button onClick={this.addCandidate}>Add Candidate</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}